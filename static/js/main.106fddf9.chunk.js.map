{"version":3,"sources":["Component/Card/Card.component.jsx","Component/List-Card/List-Card.Component.jsx","Component/SearchBox/searchbox.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monsters","id","name","email","CardList","map","monster","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","fetch","then","response","json","users","setState","this","filteredMonst","filter","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+SAeeA,EAZG,SAAAC,GAAK,OACnB,sBAAKC,UAAU,iBAAf,UACA,qBACAC,IAAI,WACJC,IAAG,+BAA0BH,EAAMI,SAASC,GAAzC,4BAEC,mCAAML,EAAMI,SAASE,QACrB,4BAAIN,EAAMI,SAASG,YCMZC,EAXO,SAAAR,GAClB,OACI,qBAAKC,UAAU,YAAf,SAESD,EAAMI,SAASK,KAAI,SAAAC,GAAO,OACvB,cAAC,EAAD,CAAuBN,SAAUM,GAAtBA,EAAQL,UCGxBM,G,YAXS,SAAC,GACxB,IADyBC,EAC1B,EAD0BA,YAAYC,EACtC,EADsCA,aAElC,OACJ,uBACAC,KAAK,SACLb,UAAU,OACVW,YAAaA,EACbG,SAAUF,MC8BKG,E,kDAjCqB,aAAc,IAAD,8BACX,gBACKC,MAAM,CACTb,SAAS,GACTc,YAAa,IAJJ,E,qDAOb,WAAoB,IAAD,OACjBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAACpB,SAASmB,S,oBAIzC,WACC,IAAD,OAEMnB,EAASqB,KAAKR,MAAMb,SACpBc,EAAYO,KAAKR,MAAMC,YACvBQ,EAAgBtB,EAASuB,QAAO,SAAAjB,GAAa,OAAOA,EAAQJ,KAAKsB,cAAcC,SAASX,EAAYU,kBACxG,OACE,sBAAK3B,UAAU,MAAf,UACK,iDACD,cAAC,EAAD,CAAWW,YAAY,cACvBC,aAAc,SAAAiB,GAAC,OAAI,EAAKN,SAAS,CAACN,YAAcY,EAAEC,OAAOC,WACzD,cAAC,EAAD,CAAW5B,SAAUsB,W,GA1B9CO,aCOJC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.106fddf9.chunk.js","sourcesContent":["import React from 'react';\r\nimport './CardStyle.css'\r\n\r\nexport const Card=props =>(\r\n    <div className='card-container'>\r\n    <img \r\n    alt='Monsters'\r\n    src={`https://robohash.org/${props.monsters.id}?set=set2&size=180x180`}\r\n    />\r\n        <h2> {props.monsters.name}</h2>\r\n        <p>{props.monsters.email}</p>\r\n    </div>\r\n\r\n)\r\n\r\nexport default Card;","import React from 'react'; \r\nimport './ListCard.css';  \r\n\r\nimport Card from '../Card/Card.component'\r\n\r\nexport const CardList=props=>{\r\n    return(\r\n        <div className='listcards'>\r\n        \r\n                {props.monsters.map(monster => (\r\n                    <Card key={monster.id} monsters={monster} />\r\n                ))} \r\n        </div>\r\n\r\n    )\r\n}\r\nexport default CardList;\r\n\r\n ","import React from 'react';\r\nimport './searchBox.style.css'\r\nexport  const SearchBox=({placeholder,handleChange})=>\r\n{\r\n    return(\r\n<input\r\ntype='search'\r\nclassName='Sbox'\r\nplaceholder={placeholder}\r\nonChange={handleChange}\r\n/>\r\n    );\r\n}\r\nexport default SearchBox;","import React, { Component } from 'react';\nimport CardList from './Component/List-Card/List-Card.Component.jsx'\nimport './App.css';\nimport SearchBox from './Component/SearchBox/searchbox.component.jsx'\n  \nclass App extends  Component{\n                                    constructor(){\n                                      super();\n                                      this.state={\n                                        monsters:[],\n                                        searchField :'',\n                                      }\n                                    }\n                                    componentDidMount(){\n                                      fetch('https://jsonplaceholder.typicode.com/users')\n                                      .then(response => response.json())\n                                      .then(users => this.setState({monsters:users}))\n                                    }\n                                    \n                                    \n                                    render()\n                                    {\n\n                                    const monsters=this.state.monsters;\n                                    const searchField=this.state.searchField\n                                    const filteredMonst = monsters.filter(monster =>  {return monster.name.toLowerCase().includes(searchField.toLowerCase())})\n                                      return(\n                                        <div className='App'>\n                                             <h1>Monster Roledux</h1>\n                                            <SearchBox placeholder='Search Name'\n                                            handleChange={e => this.setState({searchField : e.target.value})}  />\n                                            <CardList  monsters={filteredMonst}/>\n                                        </div>\n\n                                      \n                                      );\n                                    }\n\n}\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}